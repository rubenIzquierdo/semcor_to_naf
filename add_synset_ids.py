#!/usr/bin/env python

"""
This script adds the synset identifiers to some NAF files created with the semcor to NAF converter. In the
original NAF files only senses and lexical keys are included. Different types of input is allowed:
1) A folder as generated by conver_corpus.py script
2) A list with paths to NAF files
3) A single file

The synset information is added to the same files, so no new files are created.
Run the script with -h option to see the parameters
"""

import sys
import os
import glob
from argparse import ArgumentParser
try:
    from lib.KafNafParserPy import *
except:
    from KafNafParserPy import *
    

# This function takes the path to the root of wordnet, as can be downloaded from http://wordnetcode.princeton.edu/1.6/wn16.unix.tar.gz
# reads the index.sense file in semcorXX/dict/index.sense and returns a mapping from sensekey to synset
# From 's_gravenhage%1:15:00:: 06537474 1 0
# creates  map["'s_gravenhage%1:15:00:"] = 06537474
def load_mapping_sensekey_synset(path_to_wn):
    """
    Takes the path to the root of the wordnet plain text files, and reads from path/dict/index.sense the mapping
    from sensekeys to synsets
    
    @type path_to_wn: string
    @param path_to_wn: the path to the WordNet plain files
    @rtype: map
    @return: mapping from sensekeys to synsets (map["'s_gravenhage%1:15:00:"] = 06537474)
    """
    my_map = {}
    index_sense = path_to_wn+'/dict/index.sense'
    if not os.path.exists(index_sense):
        print 'Index file not found in',index_sense
        sys.exit(0)
    fd = open(index_sense,'r')
    for line in fd:
        fields = line.strip().split(' ')
        sensekey = fields[0]
        synset = fields[1]
        my_map[sensekey] = synset
    fd.close()
    print 'Loaded',len(my_map),'mappings sensekey->synset from',index_sense
    return my_map


#Process a single NAF file and adds the synset information in place, in the file itself
def process_file(this_file,wn_version,map_sensekey_to_synset):
    """
    Process a single NAF file and adds the synset information the file.
    
    @type this_file: string
    @param this_file: the path to the NAF file
    @type wn_version: string
    @param wn_version: the version label (eng16) of the WordNet
    @type map_sensekey_to_synset: map
    @param map_sensekey_to_synset: mapping from sensekey to synset
    """
    
    print 'Processing',this_file
    naf_obj = KafNafParser(this_file)
    for term in naf_obj.get_terms():
        ext_refs = term.get_external_references()
        if ext_refs is not None:
            for ext_ref in ext_refs:
                if ext_ref.get_reftype() == 'lexical_key':
                    lex_key = ext_ref.get_reference()   #This is for instance 1:28:00::
                    complete_key = term.get_lemma()+'%'+lex_key
                    synset = map_sensekey_to_synset.get(complete_key)
                    if synset is not None:
                        ext_ref = CexternalReference()
                        ext_ref.set_confidence('1.0')
                        ext_ref.set_resource('WordNet-'+wn_version)
                        '''The synset type is encoded as follows:
                        1    NOUN 
                        2    VERB 
                        3    ADJECTIVE 
                        4    ADVERB 
                        5    ADJECTIVE SATELLITE'''
                        pos = 'x'
                        if lex_key[0] == '1': pos='n'
                        elif lex_key[0] == '2': pos='v'
                        elif lex_key[0] == '3' or lex_key[0] == '5': pos='a'
                        elif lex_key[0] == '4': pos='r'
                        
                        synset = wn_version+'-'+synset+'-'+pos
                        ext_ref.set_reference(synset)
                        ext_ref.set_reftype('synset')
                        term.add_external_reference(ext_ref)
    naf_obj.dump(this_file)
            
# Process a folder like the one generated by the convert_corpus file, with the structure:
# folder
#  -> brown1
#    -> *naf
#  -> brown2
#    -> *naf
def process_folder(this_folder,wn_version,map_sensekey_to_synset):
    """
    Process a folder with the subfolders brown[12v] and *naf under each subfolder
    
    @type this_folder: string
    @param this_folder: path to the folder
    @type wn_version: string
    @param wn_version: the label (for instance eng16) of the WordNet, to create the synset like eng16-0000000-n
    @type map_sensekey_to_synset: map
    @param map_sensekey_to_synset: mapping from sensekey to synset
    """
    for input_file in glob.glob(this_folder+'/brown*/*.naf'):
        process_file(input_file,wn_version,map_sensekey_to_synset)


# Process a filename (list_files) with paths to NAF files
def process_list_files(list_files,wn_version,map_sensekey_to_synset):
    """
    Adds synset information to a list of files. The paths to these files is stored in the input file
    
    @type list_files: string
    @param list_files: path to the file containing paths to the NAF files to convert
    @type wn_version: string
    @param wn_version: the label (for instance eng16) of the WordNet, to create the synset like eng16-0000000-n
    @type map_sensekey_to_synset: map
    @param map_sensekey_to_synset: mapping from sensekey to synset
    """
    if not os.path.exists(list_files):
        print 'File',list_files,'not found!'
        sys.exit(-1)
    fd = open(list_files)
    for input_file in fd:
        process_file(input_file.strip(),wn_version,map_sensekey_to_synset)
    fd.close()
    
    
        
if __name__ == '__main__':
    """
    The main routine with reads the input parameters and call to the proper functions
    """
    my_arg_parser = ArgumentParser(description='Script to add synset ids to NAF files, modifying the files in place.')
    group_input = my_arg_parser.add_mutually_exclusive_group(required=True)
    group_input.add_argument('-i','-input_folder',help='Input folder',dest='input_folder')
    group_input.add_argument('-l','-list_files',help='File with paths to files',dest='list_files')
    group_input.add_argument('-f','-file',help='Single NAF filename',dest='file')
    

    my_arg_parser.add_argument('-wn',help='Path to WordNet plain text files',dest='wn', required=True)
    my_arg_parser.add_argument('-wn_ver', help='Version code of the WordNet used, will be included in the synset ids', dest='wn_version', required=True)
    
    args = my_arg_parser.parse_args()
    
    map_sensekey_to_synset = load_mapping_sensekey_synset(args.wn)
    
    if args.input_folder is not None: 
        #Process a whole folder
        process_folder(args.input_folder,args.wn_version,map_sensekey_to_synset)
    elif args.list_files is not None:
        #Process a file with paths to NAF files
        process_list_files(args.list_files,args.wn_version,map_sensekey_to_synset)
    elif args.file is not None:
        #Process a single NAF file
        process_file(args.file,args.wn_version,map_sensekey_to_synset)
    
    sys.exit(0)
    